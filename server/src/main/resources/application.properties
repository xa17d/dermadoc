# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate=DEBUG

hibernate.transaction.factory_class = org.hibernate.transaction.JDBCTransactionFactory

# Connection url for the database "Dermadoc"
spring.datasource.url = jdbc:postgresql://localhost/dermadoc?socketTimeout=30
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username = postgres
spring.datasource.password = postgres
spring.jackson.serialization.indent_output=true

spring.jpa.database=POSTGRESQL
spring.jpa.show-sql = true

# Hibernate
hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect
hibernate.show_sql= true
hibernate.hbm2ddl.auto=update


# Username and password
#spring.datasource.username = root
#spring.datasource.password =

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect